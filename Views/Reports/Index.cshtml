@{
    ViewData["Title"] = "Reports";
    var pieLabels = (string[])ViewBag.PieLabels ?? new string[0];
    var pieData = (int[])ViewBag.PieData ?? new int[0];
    var categorySummary = ViewBag.CategorySummary as IEnumerable<dynamic>;
    var totalExpenses = ViewBag.TotalExpenses ?? 0;
    var month = ViewBag.Month ?? "";
}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
<div class="container mt-5">
    <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-end mb-4 gap-3">
        <div>
            <h2 class="fw-bold">Advanced Reports</h2>
            <div class="text-muted">Gain insights into your finances</div>
        </div>
        <div class="d-flex flex-column flex-md-row gap-2 align-items-center">
            <input type="text" id="dateRange" class="form-control" style="max-width: 220px;" placeholder="Select date range" />
            <div class="btn-group ms-md-2" role="group">
                <button type="button" class="btn btn-outline-primary active" id="summaryMonthly">Monthly</button>
                <button type="button" class="btn btn-outline-primary" id="summaryWeekly">Weekly</button>
                <button type="button" class="btn btn-outline-primary" id="summaryYearly">Yearly</button>
            </div>
            <div class="ms-md-2">
                <button class="btn btn-outline-success" id="exportCsv"><i class="fa fa-file-csv me-1"></i>Export CSV</button>
                <button class="btn btn-outline-danger" id="exportPdf"><i class="fa fa-file-pdf me-1"></i>Export PDF</button>
            </div>
        </div>
    </div>
    <div class="row mb-4">
        <div class="col-md-4 mb-3">
            <div class="card shadow-sm bg-dark text-white">
                <div class="card-body">
                    <div class="d-flex align-items-center mb-2">
                        <i class="fa fa-arrow-down text-success me-2"></i>
                        <span class="fw-bold">Total Income</span>
                    </div>
                    <h3 class="fw-bold" id="cardIncome">$0</h3>
                </div>
            </div>
        </div>
        <div class="col-md-4 mb-3">
            <div class="card shadow-sm bg-dark text-white">
                <div class="card-body">
                    <div class="d-flex align-items-center mb-2">
                        <i class="fa fa-arrow-up text-danger me-2"></i>
                        <span class="fw-bold">Total Expense</span>
                    </div>
                    <h3 class="fw-bold" id="cardExpense">$0</h3>
                </div>
            </div>
        </div>
        <div class="col-md-4 mb-3">
            <div class="card shadow-sm bg-dark text-white">
                <div class="card-body">
                    <div class="d-flex align-items-center mb-2">
                        <i class="fa fa-wallet text-info me-2"></i>
                        <span class="fw-bold">Net Savings</span>
                    </div>
                    <h3 class="fw-bold" id="cardNet">$0</h3>
                </div>
            </div>
        </div>
    </div>
    <div class="row mb-4">
        <div class="col-lg-7 mb-4 mb-lg-0">
            <div class="card shadow-sm bg-dark text-white h-100">
                <div class="card-body">
                    <h5 class="card-title">Income vs Expense</h5>
                    <canvas id="lineChart" height="180"></canvas>
                </div>
            </div>
        </div>
        <div class="col-lg-5">
            <div class="card shadow-sm bg-dark text-white h-100">
                <div class="card-body">
                    <h5 class="card-title">Expenses by Category</h5>
                    <canvas id="pieChart" height="180"></canvas>
                </div>
            </div>
        </div>
    </div>
    <div class="row mt-4">
        <div class="col-lg-7 mb-4 mb-lg-0">
            <div class="card shadow-sm bg-dark text-white h-100">
                <div class="card-body">
                    <h5 class="card-title">Top Expenses</h5>
                    <table class="table table-dark table-striped mb-0" id="topExpensesTable">
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Category</th>
                                <th>Note</th>
                                <th>Amount</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Top expenses will be loaded here -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="col-lg-5">
            <div class="card shadow-sm bg-dark text-white h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <h5 class="card-title mb-0">Budget Comparison</h5>
                        <button class="btn btn-sm btn-outline-primary" data-bs-toggle="modal" data-bs-target="#budgetModal"><i class="fa fa-edit me-1"></i>Set Budgets</button>
                    </div>
                    <div id="budgetComparison"></div>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- Budget Modal -->
<div class="modal fade" id="budgetModal" tabindex="-1" aria-labelledby="budgetModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content bg-dark text-white">
            <div class="modal-header">
                <h5 class="modal-title" id="budgetModalLabel">Set Budgets Per Category</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="budgetForm">
                    <div id="budgetInputs"></div>
                    <button type="submit" class="btn btn-primary mt-3 w-100">Save Budgets</button>
                </form>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        let summaryType = 'Monthly';
        let startDate, endDate;
        // Flatpickr for date range
        const fp = flatpickr("#dateRange", {
            mode: "range",
            dateFormat: "Y-m-d",
            defaultDate: [new Date(new Date().getFullYear(), new Date().getMonth(), 1), new Date()],
            onClose: function(selectedDates, dateStr, instance) {
                if (selectedDates.length === 2) {
                    startDate = selectedDates[0].toISOString().slice(0, 10);
                    endDate = selectedDates[1].toISOString().slice(0, 10);
                    fetchReportData();
                }
            }
        });
        // Set initial dates
        const today = new Date();
        startDate = new Date(today.getFullYear(), today.getMonth(), 1).toISOString().slice(0, 10);
        endDate = today.toISOString().slice(0, 10);
        // Toggle summary type (Monthly/Weekly/Yearly)
        document.querySelectorAll('.btn-group .btn').forEach(btn => {
            btn.addEventListener('click', function() {
                document.querySelectorAll('.btn-group .btn').forEach(b => b.classList.remove('active'));
                this.classList.add('active');
                summaryType = this.textContent.trim();
                fetchReportData();
            });
        });
        // Chart.js setup
        let lineChart, pieChart;
        function renderCharts(lineLabels, incomeData, expenseData, pieLabels, pieData) {
            // Line chart
            if (lineChart) lineChart.destroy();
            lineChart = new Chart(document.getElementById('lineChart').getContext('2d'), {
                type: 'line',
                data: {
                    labels: lineLabels,
                    datasets: [
                        { label: 'Income', data: incomeData, borderColor: '#4e9eff', backgroundColor: 'rgba(78,158,255,0.1)', fill: true },
                        { label: 'Expense', data: expenseData, borderColor: '#ff4e4e', backgroundColor: 'rgba(255,78,78,0.1)', fill: true }
                    ]
                },
                options: {
                    responsive: true,
                    plugins: { legend: { labels: { color: '#fff' } } },
                    scales: { x: { ticks: { color: '#fff' } }, y: { ticks: { color: '#fff' } } }
                }
            });
            // Pie chart
            if (pieChart) pieChart.destroy();
            pieChart = new Chart(document.getElementById('pieChart').getContext('2d'), {
                type: 'pie',
                data: {
                    labels: pieLabels,
                    datasets: [{
                        data: pieData,
                        backgroundColor: [
                            '#4e9eff', '#9e4eff', '#ff4e4e', '#4effa1', '#ffe24e', '#4eafff', '#ff4ecb', '#4effe2', '#ffb84e', '#7a4eff'
                        ],
                    }]
                },
                options: {
                    responsive: true,
                    plugins: { legend: { position: 'bottom', labels: { color: '#fff', font: { size: 14 } } } }
                }
            });
            // Make sure the pieChart instance is globally accessible
            window.pieChart = pieChart;
        }
        function renderBudgetComparison(budgetComparison) {
            const container = document.getElementById('budgetComparison');
            if (!budgetComparison || budgetComparison.length === 0) {
                container.innerHTML = '<div class="text-muted">No budget data available.</div>';
                return;
            }
            container.innerHTML = budgetComparison.map(b => {
                const percent = b.Budget > 0 ? Math.min(100, (b.Actual * 100 / b.Budget)) : 0;
                const barColor = percent < 80 ? 'bg-success' : percent < 100 ? 'bg-warning' : 'bg-danger';
                return `<div class="mb-2">
                    <div class="d-flex justify-content-between">
                        <span>${b.Category}</span>
                        <span>${b.Actual} / <span class="text-info">${b.Budget}</span></span>
                    </div>
                    <div class="progress" style="height: 18px;">
                        <div class="progress-bar ${barColor}" role="progressbar" style="width: ${percent}%;" aria-valuenow="${percent}" aria-valuemin="0" aria-valuemax="100">${percent.toFixed(0)}%</div>
                    </div>
                </div>`;
            }).join('');
        }
        function loadBudgetsModal() {
            fetch('/Reports/GetBudgets')
                .then(res => res.json())
                .then(data => {
                    const container = document.getElementById('budgetInputs');
                    container.innerHTML = data.map(cat => `
                        <div class="mb-3">
                            <label class="form-label">${cat.Title}</label>
                            <input type="number" class="form-control" name="budget_${cat.CategoryId}" value="${cat.Budget}" min="0" />
                        </div>
                    `).join('');
                });
        }
        function fetchReportData() {
            fetch(`/Reports/GetReportData?start=${startDate}&end=${endDate}&summaryType=${summaryType}`)
                .then(res => res.json())
                .then(data => {
                    // Update summary cards
                    document.getElementById('cardIncome').textContent = `$${data.totalIncome}`;
                    document.getElementById('cardExpense').textContent = `$${data.totalExpense}`;
                    document.getElementById('cardNet').textContent = `$${data.net}`;
                    // Update charts
                    renderCharts(data.lineLabels, data.incomeData, data.expenseData, data.pieLabels, data.pieData);
                    // Update top expenses table
                    const tbody = document.querySelector('#topExpensesTable tbody');
                    tbody.innerHTML = data.topExpenses.map(e => `<tr><td>${e.date.split('T')[0]}</td><td>${e.category}</td><td>${e.note ?? ''}</td><td>$${e.amount}</td></tr>`).join('');
                    renderBudgetComparison(data.budgetComparison);
                });
        }
        // Initial load
        fetchReportData();
        // Export buttons (placeholder)
        document.getElementById('exportCsv').addEventListener('click', function(e) {
            e.preventDefault();
            const url = `/Reports/ExportCsv?start=${startDate}&end=${endDate}&summaryType=${summaryType}`;
            window.open(url, '_blank');
        });
        document.getElementById('exportPdf').addEventListener('click', function(e) {
            e.preventDefault();
            const url = `/Reports/ExportPdf?start=${startDate}&end=${endDate}`;
            const pieChart = document.getElementById('pieChart').toDataURL('image/png');
            const lineChart = document.getElementById('lineChart').toDataURL('image/png');
            // Get pie chart labels and colors from Chart.js instance (robust)
            const pieLabels = window.pieChart?.data?.labels || [];
            const pieColors = window.pieChart?.data?.datasets[0]?.backgroundColor || [];
            const formData = new FormData();
            formData.append('pieChartBase64', pieChart);
            formData.append('lineChartBase64', lineChart);
            formData.append('pieLabels', JSON.stringify(pieLabels));
            formData.append('pieColors', JSON.stringify(pieColors));
            fetch(url, {
                method: 'POST',
                body: formData
            })
            .then(response => response.blob())
            .then(blob => {
                const link = document.createElement('a');
                link.href = window.URL.createObjectURL(blob);
                link.download = `ExpenseReport_${startDate}_${endDate}.pdf`;
                link.click();
            });
        });
        document.querySelector('[data-bs-target="#budgetModal"]').addEventListener('click', loadBudgetsModal);
        document.getElementById('budgetForm').addEventListener('submit', function(e) {
            e.preventDefault();
            const inputs = document.querySelectorAll('#budgetInputs input');
            const promises = Array.from(inputs).map(input => {
                const categoryId = input.name.split('_')[1];
                const amount = input.value;
                return fetch('/Reports/SetBudget', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: `categoryId=${categoryId}&amount=${amount}`
                });
            });
            Promise.all(promises).then(() => {
                var modal = bootstrap.Modal.getInstance(document.getElementById('budgetModal'));
                modal.hide();
                fetchReportData();
            });
        });
    </script>
} 